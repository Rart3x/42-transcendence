generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://admin:123@postgres:5432/ft_t?schema=public"
}

model Channel {
  channelId         Int         @id @default(autoincrement())
  channelName       String      @unique
  channelAdmin      Int
  channelAdminImage String

  channelPassword   String?     @default("")  

  channelMessages   Message[]
  channelOperators  User[]      @relation("ChannelOperator")
  channelUsers      User[]      @relation("ChannelUser")
  channelUsersBan   User[]      @relation("ChannelUserBan")
  channelUsersMute  UserChannelMute[]

  isPrivate         Boolean     @default(false)
}

model GameRoom {
  id           Int   @id @default(autoincrement())

  player1SocketId String
  player2SocketId String?

  player1Ready Boolean @default(false)
  player2Ready Boolean @default(false)

  player1UserId Int?
  player2UserId Int?

  player1Reconnected Boolean @default(false)
  player2Reconnected Boolean @default(false)

  player1Afk   Boolean @default(false)
  player2Afk   Boolean @default(false)

  score        Score?

  botGame      Boolean @default(false)
  customGame   Boolean @default(false)
  running      Boolean @default(false)
  started      Boolean @default(false)
  paused       Boolean @default(false)
  finish       Boolean @default(false)

  startDate    DateTime @default(now())
  endDate      DateTime?

  users        User[]
}

model Message {
  messageId     Int       @id @default(autoincrement())
  channelId     Int
  userId        Int?

  message_text  String?
  message_date  DateTime? @default(now()) @db.Timestamp(6)

  Channel       Channel   @relation(fields: [channelId], references: [channelId], onDelete: Cascade, onUpdate: Cascade)
  sender        User?     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
}

model PrivateMessage {
  privateMessageId    Int       @id @default(autoincrement())
  messageContent      String

  privateMessageDate  DateTime  @default(now()) @db.Timestamp(6)

  senderName          String
  sender              User      @relation("PrivateMessageSender", fields: [senderName], references: [userName], onDelete: Cascade, onUpdate: Cascade)

  receiverName        String
  receiver            User      @relation("PrivateMessageReceiver", fields: [receiverName], references: [userName], onDelete: Cascade, onUpdate: Cascade)
}

model Score {
    id          Int @id @default(autoincrement())
    score       UserScore[]
    gameRoomId  Int @unique
    winByAfk    Boolean @default(false)
    winnerId    Int?
    winner      User? @relation(fields: [winnerId], references: [userId])
    gameRoom    GameRoom @relation(fields: [gameRoomId], references: [id])
}

model UserScore {
  id       Int @id @default(autoincrement())
  time     DateTime
  scoreA   Int @default(0)
  scoreB   Int @default(0)
  scorerId Int?
  scorer   User? @relation(fields: [scorerId], references: [userId])
  scoreId  Int
  score    Score @relation(fields: [scoreId], references: [gameRoomId])
}

model User {
  userId       Int       @id @unique @default(autoincrement())
  userName     String?   @unique

  blockUsers   User[]    @relation("BlockUser")
  blockOf      User[]    @relation("BlockUser")

  matchmakingScore  Int  @default(1000)

  channels     Channel[] @relation("ChannelUser")
  channelsOp   Channel[] @relation("ChannelOperator")
  channelsBan  Channel[] @relation("ChannelUserBan")

  mutedChannels UserChannelMute[]
  
  friends      User[]    @relation("Friendship")
  friendOf     User[]    @relation("Friendship")

  gameRoom     GameRoom[]
  gamePlayed   Int       @default(0)
  gameWon      Int       @default(0)
  
  messages      Message[]

  privateMessagesSent     PrivateMessage[] @relation("PrivateMessageSender")
  privateMessagesReceived PrivateMessage[] @relation("PrivateMessageReceiver")

  scorer       UserScore[]

  winner       Score[]

  displayName   String?
  image         String
  isChecked     Boolean    @default(false)

  socket        String?    @unique
  status        String?    @default("offline")

  A2F           Boolean    @default(false)
  A2FSecret     String?
  A2FUrl        String?
}

model UserChannelMute {
  id              Int       @id @default(autoincrement())
  mutedUntil      DateTime

  user            User      @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId          Int
  channel         Channel   @relation(fields: [channelId], references: [channelId], onDelete: Cascade, onUpdate: Cascade)
  channelId       Int
}