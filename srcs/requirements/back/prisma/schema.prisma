generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://kramjatt:123@localhost:5432/PMU"
}

model Channel {
  channelId         Int         @id @default(autoincrement())
  channelName       String      @unique
  channelAdmin      Int

  channelPassword   String?

  channelMessages   Message[]
  channelUsers      User[]      @relation("ChannelUser")
  channelUsersBan   User[]      @relation("ChannelUserBan")
  channelUsersMute  User[]      @relation("ChannelUserMute")
}

model GameRoom {
  id           Int   @id @default(autoincrement())

  player1SocketId String
  player2SocketId String

  player1Ready Boolean @default(false)
  player2Ready Boolean @default(false)

  score        Json?

  running      Boolean @default(false)
  started      Boolean @default(false)
  paused       Boolean @default(false)
  finish       Boolean @default(false)

  startDate    DateTime
  endDate      DateTime?

  users        User[]

  statId       Int?    @unique
  stat         Stat?   @relation("GameRoomStat", fields: [statId], references: [statId])
}

model Message {
  messageId     Int       @id @default(autoincrement())
  channelId     Int
  userId        Int?

  message_text  String?
  message_date  DateTime? @default(now()) @db.Timestamp(6)

  Channel       Channel   @relation(fields: [channelId], references: [channelId], onDelete: Cascade, onUpdate: Cascade)
  sender        User?     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
}

model PrivateMessage { 
  privateMessageId    Int       @id @default(autoincrement())

  privateMessageText  String
  privateMessageDate  DateTime @default(now()) @db.Timestamp(6)

  senderName          String
  sender              User      @relation("PrivateMessageSender", fields: [senderName], references: [userName], onDelete: Cascade, onUpdate: Cascade)

  receiverName        String
  receiver            User      @relation("PrivateMessageReceiver", fields: [receiverName], references: [userName], onDelete: Cascade, onUpdate: Cascade)
}

model QueueList {
  queueId Int           @id @default(autoincrement())
  users   User[]
}

model Stat {
  statId      Int       @id @default(autoincrement())
  
  gameRoomId  Int       @unique
  gameRoom    GameRoom? @relation("GameRoomStat")

  userId      Int
  user        User      @relation("GameStats", fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  users       User[]    @relation("UserStats")
}

model User {
  userId        Int        @id @unique @default(autoincrement())
  userName      String?    @unique

  channels      Channel[]  @relation("ChannelUser")
  channelsBan   Channel[]  @relation("ChannelUserBan")
  channelsMute  Channel[]  @relation("ChannelUserMute")
  
  friends       User[]     @relation("Friendship")
  friendOf      User[]     @relation("Friendship")

  gameRoomId    Int?
  gameRoom      GameRoom?  @relation(fields: [gameRoomId], references: [id])
  gamePlayed    Int        @default(0)
  gameWon       Int        @default(0)

  messages      Message[]

  privateMessagesSent      PrivateMessage[] @relation("PrivateMessageSender")
  privateMessagesReceived  PrivateMessage[] @relation("PrivateMessageReceiver")

  queueId       Int?
  queue         QueueList? @relation(fields: [queueId], references: [queueId], onDelete: Cascade, onUpdate: Cascade)

  stat          Stat[]     @relation("GameStats")
  stats         Stat[]     @relation("UserStats")

  displayName   String?    @unique
  image         String     @default("default_pic.jpg")
  isChecked     Boolean    @default(false)

  cookie        String?    @unique
  socket        String?

  A2F           Boolean    @default(false)
  A2FSecret     String?
  A2FUrl        String?
}