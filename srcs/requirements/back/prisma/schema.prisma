generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://kramjatt:123@localhost:5432/PMU"
}

model Admin {
  adminId      Int            @id @default(autoincrement())
  ChannelAdmin ChannelAdmin[]
}

model Channel {
  channelId    Int            @id @default(autoincrement())
  ChannelAdmin ChannelAdmin[]
  
  Message      Message[]
}

model ChannelAdmin {
  adminId       Int
  channelId     Int
  
  Admin         Admin   @relation(fields: [adminId], references: [adminId], onDelete: Cascade, onUpdate: Cascade)
  Channel       Channel @relation(fields: [channelId], references: [channelId], onDelete: Cascade, onUpdate: Cascade)

  @@id([adminId, channelId])
}

model Game {
  gameId       Int     @id @default(autoincrement())
}

model GameRoom {
  roomId       Int     @id @default(autoincrement())
  started      Boolean @default(false)
  users        User[]
}

model Message {
  messageId    Int       @id @default(autoincrement())
  channelId    Int?
  
  message_text String
  message_date DateTime? @default(now()) @db.Timestamp(6)
  
  Channel      Channel?  @relation(fields: [channelId], references: [channelId], onDelete: Cascade, onUpdate: Cascade)
}

model QueueList {
  queueId Int            @id @default(autoincrement())
  users   User[]
}

model Stat {
  statId      Int        @id @default(autoincrement())
  gamePlayed  Int
  gameWon     Int
  users       User[]
}

model User {
  userId      Int        @id @unique @default(autoincrement())
  userName    String?    @unique
  
  friends     Int[]      @default([])
  
  roomId      Int?
  room        GameRoom?  @relation(fields: [roomId], references: [roomId], onDelete: Cascade, onUpdate: Cascade)
  
  queueId     Int?
  queue       QueueList? @relation(fields: [queueId], references: [queueId], onDelete: Cascade, onUpdate: Cascade)

  statId      Int?
  stat        Stat?      @relation(fields: [statId], references: [statId], onDelete: Cascade, onUpdate: Cascade)
  
  A2F         Boolean    @default(false)
  cookie      String?    @unique
  displayName String?    @unique
  image       String     @default("default_pic.jpg")
  isChecked   Boolean    @default(false)
  socket      String?
}